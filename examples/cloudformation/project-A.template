{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "CoreOS on EC2: http://coreos.com/docs/running-coreos/cloud-providers/ec2/",
  "Mappings": {
    "RegionMap": {
      "ap-northeast-1": {
        "AMI": "ami-b4fce6da"
      },
      "eu-central-1": {
        "AMI": "ami-021ffd6d"
      }
    }
  },
  "Outputs": {
    "Cluster": {
      "Value": {
        "Ref": "Cluster"
      }
    },
    "PrivateSubnetIds": {
      "Value": {
        "Fn::Join": [
          ",",
          [
            {
              "Ref": "PrivatePrimarySubnet"
            },
            {
              "Ref": "PrivateSecondarySubnet"
            }
          ]
        ]
      }
    },
    "PublicSubnetIds": {
      "Value": {
        "Fn::Join": [
          ",",
          [
            {
              "Ref": "PublicPrimarySubnet"
            },
            {
              "Ref": "PublicSecondarySubnet"
            }
          ]
        ]
      }
    },
    "VpcId": {
      "Value": {
        "Ref": "Vpc"
      }
    }
  },
  "Parameters": {
    "AllowSSHFrom": {
      "Default": "0.0.0.0/0",
      "Type": "String"
    },
    "DesiredCapacity": {
      "Default": 0,
      "MaxValue": 3,
      "MinValue": 0,
      "Type": "Number"
    },
    "InstanceType": {
      "Default": "t2.micro",
      "Type": "String"
    },
    "KeyPair": {
      "Default": "default",
      "Type": "AWS::EC2::KeyPair::KeyName"
    }
  },
  "Resources": {
    "AutoScalingGroup": {
      "Properties": {
        "DesiredCapacity": {
          "Ref": "DesiredCapacity"
        },
        "LaunchConfigurationName": {
          "Ref": "LaunchConfiguration"
        },
        "MaxSize": 3,
        "MinSize": 0,
        "Tags": [
          {
            "Key": "Name",
            "PropagateAtLaunch": true,
            "Value": {
              "Ref": "LaunchConfiguration"
            }
          }
        ],
        "VPCZoneIdentifier": [
          {
            "Ref": "PublicPrimarySubnet"
          },
          {
            "Ref": "PublicSecondarySubnet"
          }
        ]
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "PauseTime": "PT10M",
          "WaitOnResourceSignals": true
        },
        "AutoScalingScheduledAction": {
          "IgnoreUnmodifiedGroupSizeProperties": true
        }
      }
    },
    "Cluster": {
      "Type": "AWS::ECS::Cluster"
    },
    "ClusterDownAlarm": {
      "Properties": {
        "AlarmActions": [
          {
            "Ref": "DownScalingPolicy"
          }
        ],
        "ComparisonOperator": "LessThanOrEqualToThreshold",
        "Dimensions": [
          {
            "Name": "ClusterName",
            "Value": {
              "Ref": "Cluster"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "MemoryReservation",
        "Namespace": "AWS/ECS",
        "Period": 300,
        "Statistic": "Maximum",
        "Threshold": 0
      },
      "Type": "AWS::CloudWatch::Alarm"
    },
    "ClusterUpAlarm": {
      "Properties": {
        "AlarmActions": [
          {
            "Ref": "UpScalingPolicy"
          }
        ],
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "Dimensions": [
          {
            "Name": "ClusterName",
            "Value": {
              "Ref": "Cluster"
            }
          }
        ],
        "EvaluationPeriods": 1,
        "MetricName": "MemoryReservation",
        "Namespace": "AWS/ECS",
        "Period": 300,
        "Statistic": "Maximum",
        "Threshold": 95
      },
      "Type": "AWS::CloudWatch::Alarm"
    },
    "DownScalingPolicy": {
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "AutoScalingGroup"
        },
        "ScalingAdjustment": -1
      },
      "Type": "AWS::AutoScaling::ScalingPolicy"
    },
    "EtcdIngress": {
      "Properties": {
        "FromPort": "2379",
        "GroupId": {
          "Fn::GetAtt": [
            "SecurityGroup",
            "GroupId"
          ]
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "SecurityGroup",
            "GroupId"
          ]
        },
        "ToPort": "2379"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "EtcdPeerIngress": {
      "Properties": {
        "FromPort": "2380",
        "GroupId": {
          "Fn::GetAtt": [
            "SecurityGroup",
            "GroupId"
          ]
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "SecurityGroup",
            "GroupId"
          ]
        },
        "ToPort": "2380"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "InstanceProfile": {
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "Role"
          }
        ]
      },
      "Type": "AWS::IAM::InstanceProfile"
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway"
    },
    "InternetGatewayAttachment": {
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        },
        "VpcId": {
          "Ref": "Vpc"
        }
      },
      "Type": "AWS::EC2::VPCGatewayAttachment"
    },
    "LaunchConfiguration": {
      "Properties": {
        "AssociatePublicIpAddress": true,
        "IamInstanceProfile": {
          "Ref": "InstanceProfile"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "InstanceMonitoring": false,
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "KeyPair"
        },
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "SecurityGroup",
              "GroupId"
            ]
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#cloud-config\nwrite_files:\n  - path: /etc/ecs/ecs.config\n    permissions: \"00640\"\n    owner: root\n    group: root\n    permissions: 0640\n    content: |\n      ECS_AVAILABLE_LOGGING_DRIVERS=[\"json-file\",\"awslogs\"]\n      ECS_LOGFILE=/log/ecs-agent.log\n      ECS_LOGLEVEL=info\n",
                "      ECS_CLUSTER=",
                {
                  "Ref": "Cluster"
                },
                "\ncoreos:\n  units:\n    - name: amazon-ecs-agent.service\n      command: start\n      runtime: true\n      content: |\n        [Unit]\n        Description=AWS ECS Agent\n        Documentation=https://docs.aws.amazon.com/AmazonECS/latest/developerguide/\n        Requires=docker.socket\n        After=docker.socket\n\n        [Service]\n        Restart=on-failure\n        RestartSec=30\n        RestartPreventExitStatus=5\n        SyslogIdentifier=amazon-ecs-agent\n        ExecStartPre=-/bin/mkdir -p /var/log/ecs /var/ecs-data /etc/ecs\n        ExecStartPre=-/usr/bin/docker kill amazon-ecs-agent\n        ExecStartPre=-/usr/bin/docker rm amazon-ecs-agent\n        ExecStartPre=/usr/bin/docker pull amazon/amazon-ecs-agent:latest\n        ExecStart=/usr/bin/docker run \\\n                  --name amazon-ecs-agent \\\n                  --env-file=/etc/ecs/ecs.config \\\n                  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n                  --volume=/var/log/ecs:/log \\\n                  --volume=/var/ecs-data:/data \\\n                  --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro \\\n                  --volume=/run/docker/execdriver/native:/var/lib/docker/execdriver/native:ro \\\n                  --publish=127.0.0.1:51678:51678 \\\n                  amazon/amazon-ecs-agent:latest\n"
              ]
            ]
          }
        }
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration"
    },
    "MainRoute": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        },
        "RouteTableId": {
          "Ref": "MainRouteTable"
        }
      },
      "Type": "AWS::EC2::Route"
    },
    "MainRouteTable": {
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        }
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "PrivatePrimarySubnet": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "CidrBlock": "172.99.1.0/24",
        "VpcId": {
          "Ref": "Vpc"
        }
      },
      "Type": "AWS::EC2::Subnet"
    },
    "PrivateSecondarySubnet": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "CidrBlock": "172.99.2.0/24",
        "VpcId": {
          "Ref": "Vpc"
        }
      },
      "Type": "AWS::EC2::Subnet"
    },
    "PublicPrimarySubnet": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "CidrBlock": "172.99.3.0/24",
        "MapPublicIpOnLaunch": true,
        "VpcId": {
          "Ref": "Vpc"
        }
      },
      "Type": "AWS::EC2::Subnet"
    },
    "PublicPrimarySubnetRouteTableAssosciation": {
      "Properties": {
        "RouteTableId": {
          "Ref": "MainRouteTable"
        },
        "SubnetId": {
          "Ref": "PublicSecondarySubnet"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "PublicSecondarySubnet": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "CidrBlock": "172.99.4.0/24",
        "MapPublicIpOnLaunch": true,
        "VpcId": {
          "Ref": "Vpc"
        }
      },
      "Type": "AWS::EC2::Subnet"
    },
    "PublicSecondarySubnetRouteTableAssosciation": {
      "Properties": {
        "RouteTableId": {
          "Ref": "MainRouteTable"
        },
        "SubnetId": {
          "Ref": "PublicPrimarySubnet"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "Role": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
        ],
        "Path": "/"
      },
      "Type": "AWS::IAM::Role"
    },
    "SecurityGroup": {
      "Properties": {
        "GroupDescription": "CoreOS SecurityGroup",
        "VpcId": {
          "Ref": "Vpc"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "SshIngress": {
      "Properties": {
        "CidrIp": {
          "Ref": "AllowSSHFrom"
        },
        "FromPort": "22",
        "GroupId": {
          "Fn::GetAtt": [
            "SecurityGroup",
            "GroupId"
          ]
        },
        "IpProtocol": "tcp",
        "ToPort": "22"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "UpScalingPolicy": {
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "AutoScalingGroup"
        },
        "ScalingAdjustment": 1
      },
      "Type": "AWS::AutoScaling::ScalingPolicy"
    },
    "Vpc": {
      "Properties": {
        "CidrBlock": "172.99.0.0/16",
        "EnableDnsHostnames": true
      },
      "Type": "AWS::EC2::VPC"
    }
  }
}
